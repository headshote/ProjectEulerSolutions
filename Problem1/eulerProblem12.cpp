#include "eulerProblem12.h"

/**
*	The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
*	1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
*	Let us list the factors of the first seven triangle numbers:
*	     1: 1
*	     3: 1,3
*	     6: 1,2,3,6
*	    10: 1,2,5,10
*	    15: 1,3,5,15
*	    21: 1,3,7,21
*	    28: 1,2,4,7,14,28
*	We can see that 28 is the first triangle number to have over five divisors.
*	What is the value of the first triangle number to have over five hundred divisors?
*/

unsigned int eulerProblem12::firstTriangNumWithNDivisors(unsigned int n)
{
	unsigned int result = 0;
	unsigned int triangNumber = 0;

	for (unsigned int i = 1; true; ++i)
	{
		unsigned int nDivisors = 0;//consider it's divisible by itself as well
		triangNumber += i;

		unsigned int maxDivisor = (unsigned int)sqrt(triangNumber);

		for (unsigned int j = 1; j <= maxDivisor; ++j)
		{
			if (triangNumber % j == 0)
				++nDivisors;
		}

		nDivisors *= 2;	//all divisors count, so for all, that are less, than square root, there will be the same amount above it

		if (maxDivisor == triangNumber * triangNumber)
			nDivisors--;	//in case it has the actual integer square root

		if (nDivisors > n)
		{
			result = triangNumber;
			break;
		}
	}

	return result;
}